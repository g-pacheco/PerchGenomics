# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Loads datasets ~
Cov <- read.table("Cov.txt", sep = "\t", header = FALSE); head(PopGen)
# Loads datasets ~
Cov <- read.table("Cov.txt", sep = "\t", header = FALSE); head(Cov)
View(Cov)
for (i in seq_along(Cov)){
for (i in seq_along(Cov)){
print(dim(Cov[[i]]))}
for( i in seq_along(Cov)){
LIST[[i]]$Species<- rep(names(Cov)[i],nrow(Cov[[i]]))
}
View(Cov)
for( i in seq_along(Cov)){
Cov[[i]]$Species<- rep(names(Cov)[i],nrow(Cov[[i]]))
}
X
}
### The BEGINNING ~~~~~
##
# ~ Plots KG--Cov | By George Pacheco
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
Cov <- read.table("Cov.txt", sep = "\t", header = FALSE); head(Cov)
Cov <- for( i in seq_along(Cov)){
Cov[[i]]$Species<- rep(names(Cov)[i],nrow(Cov[[i]]))
}
for( i in seq_along(Cov)){
Cov[[i]]$Species<- rep(names(Cov)[i],nrow(Cov[[i]]))
}
for( i in seq_along(Cov)){
Cov[[i]]$Species<- paste(names(Cov)[i])
}
for( i in seq_along(Cov)){
Cov[[i]]$Species<- paste(names(Cov[i]))
}
head(Cov)
### The BEGINNING ~~~~~
##
# ~ Plots KG--Cov | By George Pacheco
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, dplyr, grid, lubridate, cowplot, egg, tidyverse, stringr, reshape)
# Load helper function ~
source("utilities.R")
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads datasets ~
Cov <- read.table("Cov.txt", sep = "\t", header = TRUE); head(Cov)
for( i in seq_along(Cov)){
Cov[[i]]$Species<- paste(names(Cov[i]))
}
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot)
### The BEGINNING ~~~~~
##
# ~ Estimates Ploidy from GBS Data | Gompert & Mock, 2017 - Molecular Ecology
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot)
# Reads SNPs Data
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
### The BEGINNING ~~~~~
##
# ~ Estimates Ploidy from GBS Data | Gompert & Mock, 2017 - Molecular Ecology
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot)
# Reads SNPs Data
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
SNPs_data <- as.matrix(read.table("OnlyGBS_SNPs_VcfwithAD.txt", header = FALSE))
a <- seq(1, 54, 2)
b <- seq(2, 54, 2)
cov1 <- SNPs_data[ ,a]
cov2 <- SNPs_data[ ,b]
######  2. Get heterozigosity and mean depth #####
## Get individual heterozigosity
H<-apply(is.na(cov1)==FALSE,2,mean)
#write.csv2(H,"Heterozygosity.txt")
## Get coverage depth for heterozygous sites
D<-apply(cov1+cov2,2,mean,na.rm=TRUE)
#write.csv2(D,"Depth.txt")
## Generate dataframe and plot with ggplot2
GeneralData <- data.frame(D,H)
GeneralData
HetvsDepthPlot <- ggplot(GeneralData, aes(x = D, y = H, color = KryptosIDsInfo$Species)) +
geom_smooth(method = "lm", se = FALSE,  color = "darkred", fill ="blue") +
geom_point(size = 4) + scale_color_discrete()+
labs(x= "Mean depth", y= ("Heterozygosity")) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
HetvsDepthPlot
###### 3.Estimate allelic proportions #####
###### 3.1. Diploids, triploids and tetraploids ######
propOutAllPlody <- estprops(cov1=cov1,cov2=cov2,props=c(0.25,0.33, 0.5, 0.66, 0.75),mcmc.nchain=3,mcmc.steps=100,mcmc.burnin=10,mcmc.thin=5)
str(propOutAllPlody)
Cov <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
for( i in seq_along(Cov)){
Cov[[i]]$Species<- paste(names(Cov[i]))
}
View(Cov)
head(Cov)
head(propOutAllPlody)
for( i in seq_along(Cov)){
Cov[[i]]$Species<- paste(names(Cov[i]))
}
View(Cov)
for( i in seq_along(Cov)){
Cov[[i]]$Species<- paste(names(Cov[i]))
}
View(Cov)
### The BEGINNING ~~~~~
##
# ~ Estimates Ploidy from GBS Data | Gompert & Mock, 2017 - Molecular Ecology
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot)
# Loads SNPs Data ~
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
# Loads More Data ~
SNPs_data <- as.matrix(read.table("OnlyGBS_SNPs_VcfwithAD.txt", header = FALSE))
# Subsets Data ~
a <- seq(1, 54, 2)
b <- seq(2, 54, 2)
cov1 <- SNPs_data[ ,a]
cov2 <- SNPs_data[ ,b]
# Gets Individual Heterozigosity ~
H <- apply(is.na(cov1) == FALSE, 2, mean)
# Gets Coverage Depth for Heterozygous Sites ~
D <- apply(cov1 + cov2, 2, mean, na.rm = TRUE)
# Generates Data Frame ~
GeneralData <- data.frame(D, H)
# Creates Plot Panel ~
HetvsDepthPlot <-
ggplot(GeneralData, aes(x = D, y = H, color = KryptosIDsInfo$Species)) +
geom_smooth(method = "lm", se = FALSE,  color = "darkred", fill = "blue") +
geom_point(size = 4) +
scale_color_discrete() +
labs(x = "Mean Depth", y = ("Heterozygosity")) +
theme_bw() +
theme(panel.grid = element_blank())
## 3. Estimate Allelic Proportions ~
# 3.1. Diploids, Triploids & Tetraploids ~
# Gets Ploidy Probabilities ~
propOutAllPlody <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
for( i in seq_along(propOutAllPlody)){
propOutAllPlody[[i]]$Species<- paste(names(propOutAllPlody[i]))
}
View(propOutAllPlody)
### The BEGINNING ~~~~~
##
# ~ Estimates Ploidy from GBS Data | Gompert & Mock, 2017 - Molecular Ecology
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot)
# Loads SNPs data ~
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
# Loads more data ~
SNPs_data <- as.matrix(read.table("OnlyGBS_SNPs_VcfwithAD.txt", header = FALSE))
# Subsets data ~
a <- seq(1, 54, 2)
b <- seq(2, 54, 2)
cov1 <- SNPs_data[ ,a]
cov2 <- SNPs_data[ ,b]
# Gets individual heterozigosity ~
H <- apply(is.na(cov1) == FALSE, 2, mean)
# Gets coverage depth for heterozygous sites ~
D <- apply(cov1 + cov2, 2, mean, na.rm = TRUE)
# Generates data frame ~
GeneralData <- data.frame(D, H)
# Creates Plot Panel ~
HetvsDepthPlot <-
ggplot(GeneralData, aes(x = D, y = H, color = KryptosIDsInfo$Species)) +
geom_smooth(method = "lm", se = FALSE,  color = "darkred", fill = "blue") +
geom_point(size = 4) +
scale_color_discrete() +
labs(x = "Mean Depth", y = ("Heterozygosity")) +
theme_bw() +
theme(panel.grid = element_blank())
## 3. Estimate Allelic Proportions ~
# 3.1. Diploids, Triploids & Tetraploids ~
# Gets ploidy probabilities ~
propOutAllPlody <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
propOutAllPlody_df <- data.frame(matrix(unlist(propOutAllPlody), nrow = 132, byrow = TRUE), stringsAsFactors = FALSE)
View(propOutAllPlody_df)
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot, ldply)
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot, data.table)
# Loads required packages ~
pacman::p_load(gbs2ploidy, ggplot2, devtools, ggbiplot, tidyverse)
# Loads required packages ~
pacman::p_load(gbs2ploidy, devtools, tidyverse)
propOutAllPlody_df <- propOutAllPlody %>%
unlist(recursive = FALSE) %>%
enframe() %>%
unnest()
View(propOutAllPlody_df)
propOutAllPlody_df <- dplyr::bind_rows(propOutAllPlody)
propOutAllPlody_df <- purrr::map_df(propOutAllPlody, dplyr::bind_rows)
propOutAllPlody_df <- purrr::map_df(propOutAllPlody, ~.x)
View(propOutAllPlody)
propOutAllPlody <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
propOutAllPlody_df <- dplyr::bind_rows(propOutAllPlody)
View(propOutAllPlody)
View(propOutAllPlody)
### The BEGINNING ~~~~~
##
# ~ Estimates Ploidy from GBS Data | Gompert & Mock, 2017 - Molecular Ecology
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(gbs2ploidy, devtools, tidyverse)
# Loads SNPs data ~
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
# Loads more data ~
SNPs_data <- as.matrix(read.table("OnlyGBS_SNPs_VcfwithAD.txt", header = FALSE))
# Subsets data ~
a <- seq(1, 54, 2)
b <- seq(2, 54, 2)
cov1 <- SNPs_data[ ,a]
cov2 <- SNPs_data[ ,b]
# Gets individual heterozigosity ~
H <- apply(is.na(cov1) == FALSE, 2, mean)
# Gets coverage depth for heterozygous sites ~
D <- apply(cov1 + cov2, 2, mean, na.rm = TRUE)
# Generates data frame ~
GeneralData <- data.frame(D, H)
# Creates Plot Panel ~
HetvsDepthPlot <-
ggplot(GeneralData, aes(x = D, y = H, color = KryptosIDsInfo$Species)) +
geom_smooth(method = "lm", se = FALSE,  color = "darkred", fill = "blue") +
geom_point(size = 4) +
scale_color_discrete() +
labs(x = "Mean Depth", y = ("Heterozygosity")) +
theme_bw() +
theme(panel.grid = element_blank())
## 3. Estimate Allelic Proportions ~
# 3.1. Diploids, Triploids & Tetraploids ~
# Gets ploidy probabilities ~
propOutAllPlody <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
View(propOutAllPlody)
str(propOutAllPlody)
propOutAllPlody_df <- dplyr::bind_rows(propOutAllPlody)
propOutAllPlody_df <- purrr::map_df(propOutAllPlody, ~.x)
head(propOutAllPlody)
# Expands propOutAllPlody by adding the Species columns ~
for( i in seq_along(propOutAllPlody)){
propOutAllPlody[[i]]$Species<- paste(names(propOutAllPlody[i]))
}
head(propOutAllPlody)
propOutAllPlody_df <- dplyr::bind_rows(propOutAllPlody)
str(propOutAllPlody)
propOutAllPlody_df <- purrr::map_df(propOutAllPlody, ~.x)
propOutAllPlody <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
R --version
Rverssion
Rversion
R.version
### The BEGINNING ~~~~~
##
# ~ Estimates Ploidy from GBS Data | Gompert & Mock, 2017 - Molecular Ecology
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(gbs2ploidy, devtools, tidyverse)
# Loads SNPs data ~
KryptosIDsInfo <- read.csv("KryptoIDsInfo.csv")
# Loads more data ~
SNPs_data <- as.matrix(read.table("OnlyGBS_SNPs_VcfwithAD.txt", header = FALSE))
# Subsets data ~
a <- seq(1, 54, 2)
b <- seq(2, 54, 2)
cov1 <- SNPs_data[ ,a]
cov2 <- SNPs_data[ ,b]
# Gets individual heterozigosity ~
H <- apply(is.na(cov1) == FALSE, 2, mean)
# Gets coverage depth for heterozygous sites ~
D <- apply(cov1 + cov2, 2, mean, na.rm = TRUE)
# Generates data frame ~
GeneralData <- data.frame(D, H)
# Creates Plot Panel ~
HetvsDepthPlot <-
ggplot(GeneralData, aes(x = D, y = H, color = KryptosIDsInfo$Species)) +
geom_smooth(method = "lm", se = FALSE,  color = "darkred", fill = "blue") +
geom_point(size = 4) +
scale_color_discrete() +
labs(x = "Mean Depth", y = ("Heterozygosity")) +
theme_bw() +
theme(panel.grid = element_blank())
## 3. Estimate Allelic Proportions ~
# 3.1. Diploids, Triploids & Tetraploids ~
# Gets ploidy probabilities ~
propOutAllPlody <- estprops(cov1 = cov1, cov2 = cov2, props = c(0.25, 0.33, 0.5, 0.66, 0.75), mcmc.nchain = 3, mcmc.steps = 100,
mcmc.burnin = 10, mcmc.thin = 5)
head(propOutAllPlody)
### The BEGINNING ~~~~~
##
# ~ Creates FPG--GlobalCoverage | By George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Data <- read.table("PG--GoodSamples_IntersectedWithMerged.mean")
colnames(Data) <- c("Loci", "Coverage")
DataUp <- data.frame(Coverage = Data$Coverage, Type = "")
# Creates the plot ~
GlobalCoverage <-
ggplot(DataUp, aes(x = Coverage, fill = Type, colour = Type)) +
geom_density(alpha = .15, adjust = .75, size = .3) +
scale_x_continuous("Global Depth (X)",
breaks = c(5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000),
labels = c("5K", "10K", "15K","20K", "25K", "30K", "35K", "40K", "45K", "50K", "55K", "60K", "65K","70K"),
expand = c(0,0),
limits = c(0, 71000)) +
scale_y_continuous("Density",
breaks = c(0.00001, 0.00002, 0.00003, 0.00004, 0.00005, 0.00006, 0.00007, 0.00008),
expand = c(0,0),
labels = c("1e-05", "2e-05", "3e-05", "4e-05", "5e-05", "6e-05", "7e-05", "8e-05"),
limits = c(0, 0.000145)) +
theme(panel.background = element_rect(fill = '#ffffff'),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text = element_text(size = 9, color = "#000000"),
axis.ticks = element_line(size = .3, color = "#000000"),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
legend.position = "none")
# Saves plot ~
ggsave(GlobalCoverage, file = "PG--GlobalCoverage.pdf", width = 12, height = 8, device = cairo_pdf, dpi = 600)
#
##
### The END ~~~~~
### The BEGINNING ~~~~~
##
# ~ Creates FPG--GlobalCoverage | By George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Data <- read.table("PG--GoodSamples_IntersectedWithMerged.mean")
colnames(Data) <- c("Loci", "Coverage")
DataUp <- data.frame(Coverage = Data$Coverage, Type = "")
# Creates the plot ~
GlobalCoverage <-
ggplot(DataUp, aes(x = Coverage, fill = Type, colour = Type)) +
geom_density(alpha = .15, adjust = .75, size = .3) +
scale_x_continuous("Global Depth (X)",
breaks = c(5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000),
labels = c("5K", "10K", "15K","20K", "25K", "30K", "35K", "40K", "45K", "50K", "55K", "60K", "65K","70K"),
expand = c(0,0),
limits = c(0, 71000)) +
scale_y_continuous("Density",
breaks = c(0.000025, 0.00005, 0.000075, 0.0001, 0.000125, 0.00015),
expand = c(0,0),
labels = c("2.5e-05", "5e-05", "7.5e-05", "1e-04", "1.25e-04", "1.5e-04"),
limits = c(0, 0.000145)) +
theme(panel.background = element_rect(fill = '#ffffff'),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text = element_text(size = 9, color = "#000000"),
axis.ticks = element_line(size = .3, color = "#000000"),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
legend.position = "none")
# Saves plot ~
ggsave(GlobalCoverage, file = "PG--GlobalCoverage.pdf", width = 12, height = 8, device = cairo_pdf, dpi = 600)
#
##
### The END ~~~~~
### The BEGINNING ~~~~~
##
# ~ Creates FPG--GlobalCoverage | By George PACHECO
# Cleans the environment ~
rm(list=ls())
# Sets working directory ~
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Loads required packages ~
pacman::p_load(scales, extrafont, tidyverse)
# Imports extra fonts ~
loadfonts(device = "win", quiet = TRUE)
# Loads data ~
Data <- read.table("PG--GoodSamples_IntersectedWithMerged.mean")
colnames(Data) <- c("Loci", "Coverage")
DataUp <- data.frame(Coverage = Data$Coverage, Type = "")
# Creates the plot ~
GlobalCoverage <-
ggplot(DataUp, aes(x = Coverage, fill = Type, colour = Type)) +
geom_density(alpha = .15, adjust = .75, size = .3) +
scale_x_continuous("Global Depth (X)",
breaks = c(5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000),
labels = c("5K", "10K", "15K","20K", "25K", "30K", "35K", "40K", "45K", "50K", "55K", "60K", "65K","70K"),
expand = c(0,0),
limits = c(0, 71000)) +
scale_y_continuous("Density",
breaks = c(0.000025, 0.00005, 0.000075, 0.0001, 0.000125),
expand = c(0,0),
labels = c("2.5e-05", "5e-05", "7.5e-05", "1e-04", "1.25e-04"),
limits = c(0, 0.000145)) +
theme(panel.background = element_rect(fill = '#ffffff'),
panel.grid = element_blank(),
panel.border = element_blank(),
axis.text = element_text(size = 9, color = "#000000"),
axis.ticks = element_line(size = .3, color = "#000000"),
axis.line = element_line(colour = "#000000", size = .3),
axis.title.x = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 20, r = 0, b = 0, l = 0)),
axis.title.y = element_text(size = 15, face = "bold", color = "#000000", margin = margin(t = 0, r = 20, b = 0, l = 0)),
legend.position = "none")
# Saves plot ~
ggsave(GlobalCoverage, file = "PG--GlobalDepth.pdf", width = 12, height = 8, device = cairo_pdf, dpi = 600)
#
##
### The END ~~~~~
